/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CRYPTOGUARD_BPF_SKEL_H__
#define __CRYPTOGUARD_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct cryptoguard_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *output;
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *trace_sys_enter_llistxattr;
	} progs;
	struct {
		struct bpf_link *trace_sys_enter_llistxattr;
	} links;

#ifdef __cplusplus
	static inline struct cryptoguard_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct cryptoguard_bpf *open_and_load();
	static inline int load(struct cryptoguard_bpf *skel);
	static inline int attach(struct cryptoguard_bpf *skel);
	static inline void detach(struct cryptoguard_bpf *skel);
	static inline void destroy(struct cryptoguard_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
cryptoguard_bpf__destroy(struct cryptoguard_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
cryptoguard_bpf__create_skeleton(struct cryptoguard_bpf *obj);

static inline struct cryptoguard_bpf *
cryptoguard_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct cryptoguard_bpf *obj;
	int err;

	obj = (struct cryptoguard_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = cryptoguard_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	cryptoguard_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct cryptoguard_bpf *
cryptoguard_bpf__open(void)
{
	return cryptoguard_bpf__open_opts(NULL);
}

static inline int
cryptoguard_bpf__load(struct cryptoguard_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct cryptoguard_bpf *
cryptoguard_bpf__open_and_load(void)
{
	struct cryptoguard_bpf *obj;
	int err;

	obj = cryptoguard_bpf__open();
	if (!obj)
		return NULL;
	err = cryptoguard_bpf__load(obj);
	if (err) {
		cryptoguard_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
cryptoguard_bpf__attach(struct cryptoguard_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
cryptoguard_bpf__detach(struct cryptoguard_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *cryptoguard_bpf__elf_bytes(size_t *sz);

static inline int
cryptoguard_bpf__create_skeleton(struct cryptoguard_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "cryptoguard_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "output";
	s->maps[0].map = &obj->maps.output;

	s->maps[1].name = ".rodata.str1.1";
	s->maps[1].map = &obj->maps.rodata_str1_1;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "trace_sys_enter_llistxattr";
	s->progs[0].prog = &obj->progs.trace_sys_enter_llistxattr;
	s->progs[0].link = &obj->links.trace_sys_enter_llistxattr;

	s->data = cryptoguard_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *cryptoguard_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x60\x07\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0e\0\
\x01\0\xbf\x16\0\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x7b\x1a\xf8\xff\0\0\0\0\x7b\x1a\
\xf0\xff\0\0\0\0\x7b\x1a\xe8\xff\0\0\0\0\x7b\x1a\xe0\xff\0\0\0\0\x7b\x1a\xd8\
\xff\0\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\
\x63\x0a\xc8\xff\0\0\0\0\x85\0\0\0\x0f\0\0\0\x63\x0a\xcc\xff\0\0\0\0\xbf\xa1\0\
\0\0\0\0\0\x07\x01\0\0\xd0\xff\xff\xff\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\
\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xe0\xff\xff\xff\xb7\x02\0\0\x20\0\0\0\x18\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\xbf\xa4\0\0\0\0\0\0\x07\
\x04\0\0\xc8\xff\xff\xff\xbf\x61\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x18\x03\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xb7\x05\0\0\x38\0\0\0\x85\0\0\0\
\x19\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x73\x79\x73\x5f\x65\x6e\x74\x65\
\x72\x5f\x6c\x6c\x69\x73\x74\x78\x61\x74\x74\x72\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\
\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xc0\x01\0\0\xc0\x01\0\0\xa3\x01\0\0\0\0\0\
\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\
\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\0\0\0\0\0\x03\0\0\x04\x18\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x01\0\
\0\0\x40\0\0\0\x27\0\0\0\x01\0\0\0\x80\0\0\0\x32\0\0\0\0\0\0\x0e\x05\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\x39\0\0\0\x08\0\0\x04\x28\0\0\0\x4c\0\0\0\
\x09\0\0\0\0\0\0\0\x58\0\0\0\x0a\0\0\0\x10\0\0\0\x65\0\0\0\x0a\0\0\0\x18\0\0\0\
\x7a\0\0\0\x02\0\0\0\x20\0\0\0\x85\0\0\0\x0b\0\0\0\x40\0\0\0\x90\0\0\0\x0c\0\0\
\0\x80\0\0\0\x9d\0\0\0\x0b\0\0\0\xc0\0\0\0\xa6\0\0\0\x0b\0\0\0\0\x01\0\0\xaf\0\
\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\xbe\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\xcc\
\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\
\0\x0d\x02\0\0\0\xd1\0\0\0\x07\0\0\0\xd5\0\0\0\x01\0\0\x0c\x0d\0\0\0\x88\x01\0\
\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\0\0\
\0\x0d\0\0\0\x8d\x01\0\0\0\0\0\x0e\x10\0\0\0\x01\0\0\0\x95\x01\0\0\x01\0\0\x0f\
\0\0\0\0\x06\0\0\0\0\0\0\0\x18\0\0\0\x9b\x01\0\0\x01\0\0\x0f\0\0\0\0\x11\0\0\0\
\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6b\x65\x79\x5f\x73\x69\
\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\x7a\x65\0\x6f\x75\x74\x70\x75\x74\0\
\x6b\x65\x72\x6e\x65\x6c\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x73\0\x63\
\x6f\x6d\x6d\x6f\x6e\x5f\x74\x79\x70\x65\0\x63\x6f\x6d\x6d\x6f\x6e\x5f\x66\x6c\
\x61\x67\x73\0\x63\x6f\x6d\x6d\x6f\x6e\x5f\x70\x72\x65\x65\x6d\x70\x74\x5f\x63\
\x6f\x75\x6e\x74\0\x63\x6f\x6d\x6d\x6f\x6e\x5f\x70\x69\x64\0\x73\x79\x73\x63\
\x61\x6c\x6c\x5f\x6e\x72\0\x66\x69\x6c\x65\x6e\x61\x6d\x65\x5f\x70\x74\x72\0\
\x61\x72\x67\x76\x5f\x70\x74\x72\0\x65\x6e\x76\x70\x5f\x70\x74\x72\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x63\x68\x61\x72\0\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x74\x72\x61\x63\x65\
\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x6c\x6c\x69\x73\x74\x78\x61\x74\
\x74\x72\0\x74\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\
\x6e\x74\x65\x72\x5f\x6c\x6c\x69\x73\x74\x78\x61\x74\x74\x72\0\x2f\x68\x6f\x6d\
\x65\x2f\x63\x72\x79\x70\x74\x6f\x67\x75\x61\x72\x2f\x43\x72\x79\x70\x74\x6f\
\x47\x75\x61\x72\x64\x2f\x43\x72\x79\x70\x74\x6f\x47\x75\x61\x72\x64\x2f\x63\
\x72\x79\x70\x74\x6f\x67\x75\x61\x72\x64\x2e\x62\x70\x66\x2e\x63\0\x54\x52\x41\
\x43\x45\x5f\x53\x59\x53\x43\x41\x4c\x4c\x28\x73\x79\x73\x5f\x65\x6e\x74\x65\
\x72\x5f\x6c\x6c\x69\x73\x74\x78\x61\x74\x74\x72\x2c\x20\x22\x73\x79\x73\x5f\
\x65\x6e\x74\x65\x72\x5f\x6c\x6c\x69\x73\x74\x78\x61\x74\x74\x72\x22\x29\0\x63\
\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x4c\0\
\0\0\x60\0\0\0\0\0\0\0\x08\0\0\0\xf0\0\0\0\x01\0\0\0\0\0\0\0\x0e\0\0\0\x10\0\0\
\0\xf0\0\0\0\x04\0\0\0\0\0\0\0\x11\x01\0\0\x4c\x01\0\0\0\xa0\0\0\x10\0\0\0\x11\
\x01\0\0\x4c\x01\0\0\x01\xa0\0\0\xc0\0\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\xc8\0\0\
\0\x11\x01\0\0\x4c\x01\0\0\x01\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x21\0\0\0\x12\0\x03\0\0\0\0\0\0\0\
\0\0\x10\x01\0\0\0\0\0\0\x14\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\
\0\x90\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\
\x01\0\0\0\x02\0\0\0\xd0\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\xb8\x01\0\0\0\0\0\0\
\x04\0\0\0\x04\0\0\0\xd0\x01\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x2c\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x0c\x0d\x0e\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\x2e\x65\x78\x74\0\x6f\x75\x74\x70\x75\x74\0\x2e\x6d\x61\x70\x73\0\
\x74\x72\x61\x63\x65\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x6c\x6c\x69\
\x73\x74\x78\x61\x74\x74\x72\0\x2e\x72\x65\x6c\x74\x70\x2f\x73\x79\x73\x63\x61\
\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x6c\x6c\x69\x73\x74\
\x78\x61\x74\x74\x72\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\
\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\
\x2e\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x77\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xb3\x06\0\0\0\0\0\0\xa7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x40\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\
\0\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3c\0\
\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x06\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\x0d\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x98\0\0\0\x01\
\0\0\0\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\x15\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x1b\0\0\0\x01\0\0\0\x03\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6f\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x8b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x90\x01\0\0\0\0\0\0\x7b\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x87\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x06\0\0\
\0\0\0\0\x20\0\0\0\0\0\0\0\x0d\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0c\x05\0\0\0\0\0\0\
\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x06\0\0\0\0\0\0\x50\0\0\0\0\0\
\0\0\x0d\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x61\0\0\0\x03\x4c\
\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x06\0\0\0\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7f\0\0\0\x02\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x05\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\0\0\x03\
\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct cryptoguard_bpf *cryptoguard_bpf::open(const struct bpf_object_open_opts *opts) { return cryptoguard_bpf__open_opts(opts); }
struct cryptoguard_bpf *cryptoguard_bpf::open_and_load() { return cryptoguard_bpf__open_and_load(); }
int cryptoguard_bpf::load(struct cryptoguard_bpf *skel) { return cryptoguard_bpf__load(skel); }
int cryptoguard_bpf::attach(struct cryptoguard_bpf *skel) { return cryptoguard_bpf__attach(skel); }
void cryptoguard_bpf::detach(struct cryptoguard_bpf *skel) { cryptoguard_bpf__detach(skel); }
void cryptoguard_bpf::destroy(struct cryptoguard_bpf *skel) { cryptoguard_bpf__destroy(skel); }
const void *cryptoguard_bpf::elf_bytes(size_t *sz) { return cryptoguard_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
cryptoguard_bpf__assert(struct cryptoguard_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CRYPTOGUARD_BPF_SKEL_H__ */
